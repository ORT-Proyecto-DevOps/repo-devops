name: Github Action Workflow CI/CD

on:
  workflow_call:
    inputs:
      IMAGE_TAG:
        required: true
        type: string
      BRANCH:
        required: true
        type: string
      ENV:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      AWS_SESSION_TOKEN:
        required: true
      SONAR_TOKEN_ORDERS_SERVICE:
        required: true
      ECR_REGISTRY:
        required: true
      ECR_REPOSITORY:
        required: true

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu"

      - name: Cache SonarCloud packages
        id: cache-sonar
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_ORDERS_SERVICE }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ORT-Proyecto-DevOps_orders-service-example

  build:
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu"

      - name: Cache Maven packages
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean install

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Clone products service repository
        run: |
          git clone -b ${{ inputs.BRANCH }} https://github.com/ORT-Proyecto-DevOps/products-service-example.git ./products-service

      - name: Clone payments service repository
        run: |
          git clone -b ${{ inputs.BRANCH }} https://github.com/ORT-Proyecto-DevOps/payments-service-example.git ./payments-service

      - name: Clone shipping service repository
        run: |
          git clone -b ${{ inputs.BRANCH }} https://github.com/ORT-Proyecto-DevOps/shipping-service-example.git ./shipping-service

      - name: Build and run services with Docker Compose
        run: |
          docker-compose up -d --build

      # Verifica los logs de los contenedores para depurar problemas de salud.
      - name: Check logs
        run: |
          docker-compose logs

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman tests
        run: |
          newman run postman/orders.postman_collection.json
      
      # Detener y eliminar contenedores despuÃ©s de las pruebas
      - name: Stop and remove Docker containers
        run: |
          docker-compose down

  push_image_ecr:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Authenticate Docker to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t orders-service:${{ inputs.IMAGE_TAG }} .

      - name: Tag Docker image
        run: |
          docker tag orders-service:${{ inputs.IMAGE_TAG }} ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ inputs.IMAGE_TAG }}

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ inputs.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: push_image_ecr
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Update Task Definition
        id: update_task_definition
        run: |
          TASK_DEFINITION_NAME="aws-ecs-orders-task-${{ inputs.ENV }}"
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ inputs.IMAGE_TAG }}" '.taskDefinition.containerDefinitions[0].image = $IMAGE')
          APP_ARGS="http://aws-ecs-internal-lb-dev-1620666920.us-east-1.elb.amazonaws.com:8080 http://aws-ecs-internal-lb-dev-1620666920.us-east-1.elb.amazonaws.com:8080 http://aws-ecs-internal-lb-dev-1620666920.us-east-1.elb.amazonaws.com:8080"
          NEW_TASK_DEFINITION=$(echo $NEW_TASK_DEFINITION | jq --arg APP_ARGS "$APP_ARGS" '.taskDefinition.containerDefinitions[0].environment += [{"name": "APP_ARGS", "value": $APP_ARGS}]')
          NEW_TASK_DEF_REVISION=$(echo $NEW_TASK_DEFINITION | jq '.taskDefinition' | jq 'del(.status,.taskDefinitionArn,.revision,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)')
          echo "$NEW_TASK_DEF_REVISION" > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json
        
      - name: Deploy to ECS Service
        run: |
          CLUSTER_NAME="aws-ecs-${{ inputs.ENV }}"
          SERVICE_NAME="aws-ecs-orders-service-${{ inputs.ENV }}"
          NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition aws-ecs-orders-task-${{ inputs.ENV }} | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN
  
      - name: Stop Old Tasks
        run: |
          CLUSTER_NAME="aws-ecs-${{ inputs.ENV }}"
          SERVICE_NAME="aws-ecs-orders-service-${{ inputs.ENV }}"
          OLD_TASKS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --desired-status RUNNING --query "taskArns" --output text)
          for task in $OLD_TASKS; do
            aws ecs stop-task --cluster $CLUSTER_NAME --task $task
          done